@page
@model IEnumerable<IFormFile>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h3 class="p-3"> Merge file using Cronjob</h3>
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Upload Files</h2>
                </div>
                <div class="card-body">
                    <form id="uploadForm" asp-controller="FileUpload" asp-action="UploadChunkToCronjob" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label for="files" class="form-label">Select Files</label>
                            <input type="file" class="form-control" id="files" name="files" multiple />
                        </div>
                        <div class="progress" style="display: none;">
                            <div class="progress-bar" id="progressBar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">Upload</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/uploadhub")
            .build();

        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        let connectionId = null;

        connection.start().then(function () {
            console.log("Connected to SignalR hub with connectionId:", connection.connectionId);
            connectionId = connection.connectionId;
        }).catch(function (err) {
            console.error("Error starting SignalR connection:", err);
        });
    connection.on("ReceiveMessage", function (message) {
            console.log("Notification received:", message);
            alert(message);
        });

        document.getElementById("uploadForm").addEventListener("submit", function (event) {
            event.preventDefault();

            const form = document.getElementById('uploadForm');
            const files = document.getElementById('files').files;

            if (files.length === 0) {
                alert('Please select a file to upload.');
                return;
            }

            // Iterate over each file and upload chunks
            Array.from(files).forEach((file) => {
                const chunkSize = 1024 * 1024; // 1 MB chunk size
                const totalChunks = Math.ceil(file.size / chunkSize);
                let offset = 0;
                let totalBytesUploaded = 0; // Track total bytes uploaded

                const uploadChunk = (chunkIndex) => {
                    const reader = new FileReader();

                    // Read the file chunk
                    const blob = file.slice(offset, offset + chunkSize);
                    reader.readAsArrayBuffer(blob);

                    reader.onload = function (e) {
                        const chunkData = new Blob([new Uint8Array(e.target.result)]);

                        const xhr = new XMLHttpRequest();
                        xhr.open('POST', form.action, true);

                        // Set up headers
                        xhr.setRequestHeader('X-File-Name', file.name);
                        xhr.setRequestHeader('X-Chunk-Index', chunkIndex);
                        xhr.setRequestHeader('X-Total-Chunks', totalChunks);
                        xhr.setRequestHeader('XSRF-TOKEN', token);
                        xhr.setRequestHeader('X-Connection-Id', connectionId); // Pass SignalR connection ID

                        // Show progress bar
                        const progressBar = document.getElementById('progressBar');
                        document.querySelector('.progress').style.display = 'block';

                        // Track progress
                        xhr.upload.onprogress = function (event) {
                            if (event.lengthComputable) {
                                // Update total bytes uploaded
                                totalBytesUploaded += event.loaded;
                                const percentComplete = Math.round((totalBytesUploaded / file.size) * 100);
                                progressBar.style.width = percentComplete + '%';
                                progressBar.innerHTML = percentComplete + '%';
                            }
                        };

                        // On upload complete
                        xhr.onload = function () {
                            if (xhr.status === 200) {
                                console.log('Chunk ' + (chunkIndex + 1) + ' uploaded successfully!');
                                offset += chunkSize;

                                if (chunkIndex + 1 < totalChunks) {
                                    uploadChunk(chunkIndex + 1); // Upload next chunk
                                } else {
                                    progressBar.style.width = '100%';
                                    progressBar.innerHTML = '100%';
                                    document.querySelector('.progress').style.display = 'none';
                                    console.log('All chunks uploaded successfully!');
                                }
                            } else {
                                console.log('Error uploading chunk ' + (chunkIndex + 1) + '.');
                            }
                        };

                        const chunkFormData = new FormData();
                        chunkFormData.append('fileChunk', chunkData);
                        chunkFormData.append('fileName', file.name);
                        chunkFormData.append('chunkIndex', chunkIndex);
                        chunkFormData.append('totalChunks', totalChunks);

                        xhr.send(chunkFormData);
                    };
                };

                uploadChunk(0); // Start uploading the first chunk
            });
        });
    </script>
}
